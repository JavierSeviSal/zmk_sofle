/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

&led_strip {
    chain-length = <6>; // Uncomment if using both per-key and underglow LEDs
};



/ {
    behaviors {
        media: media {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;

            tapping-term-ms = <400>;
        };
        hm: homerow-mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homehow-mods";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>; 
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_combo {
            bindings = <&kp CAPSLOCK>;
            key-positions = <28 31>;
            layers = <0>;
            timeout-ms = <100>;
        };

        /*a_tilde {
            bindings = <&kp RA(A)>;
            key-positions = <28 25>;
            timeout-ms = <100>;
        };

        enie {
            bindings = <&kp RA(N)>;
            key-positions = <28 44>;
            timeout-ms = <100>;
        };

        a_tilde_2 {
            bindings = <&kp RA(A)>;
            key-positions = <31 25>;
            timeout-ms = <100>;
        };

        enie_2 {
            bindings = <&kp RA(N)>;
            key-positions = <44 31>;
            timeout-ms = <100>;
        };

        e_tilde {
            bindings = <&kp RA(E)>;
            key-positions = <28 15>;
            timeout-ms = <100>;
        };

        e_tilde_2 {
            bindings = <&kp RA(E)>;
            key-positions = <15 31>;
            timeout-ms = <100>;
        };

        u_tilde {
            bindings = <&kp RA(U)>;
            key-positions = <28 19>;
            timeout-ms = <100>;
        };

        u_tilde_2 {
            bindings = <&kp RA(U)>;
            key-positions = <19 31>;
            timeout-ms = <100>;
        };

        i_tilde {
            bindings = <&kp RA(I)>;
            key-positions = <28 20>;
            timeout-ms = <100>;
        };

        i_tilde_2 {
            bindings = <&kp RA(I)>;
            key-positions = <20 31>;
            timeout-ms = <100>;
        };

        o_tilde {
            bindings = <&kp RA(O)>;
            key-positions = <28 21>;
            timeout-ms = <100>;
        };

        o_tilde_2 {
            bindings = <&kp RA(O)>;
            key-positions = <21 31>;
            timeout-ms = <100>;
        };*/
    };

    macros {
        color_lyr1: color_lyr1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(102,94,70)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 1>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(172,28,95)>;

            label = "COLOR_LYR1";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        color_lyr2: color_lyr2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(276,94,78)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(172,28,95)>;

            label = "COLOR_LYR2";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        // Windows sleep key

        win_sleep: win_sleep {
            wait-ms = <50>;
            tap-ms = <5>;
            compatible = "zmk,behavior-macro";
            label = "WIN_SLEEP_KEY";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp U &kp S>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp ESC    &kp N1  &kp N2         &kp N3    &kp N4           &kp N5                           &kp N6  &kp N7           &kp N8         &kp N9    &kp N0         &kp EQUAL
&kp TAB    &kp Q   &kp W          &kp E     &kp R            &kp T                            &kp Y   &kp U            &kp I          &kp O     &kp P          &kp MINUS
&kp LCTRL  &kp A   &kp S          &kp D     &hm RIGHT_ALT F  &kp G                            &kp H   &hm RIGHT_ALT J  &kp K          &kp L     &kp SEMICOLON  &kp SQT
&kp LSHFT  &kp Z   &kp X          &kp C     &kp V            &kp B   &media       &none       &kp N   &kp M            &kp COMMA      &kp DOT   &kp FSLH       &kp RSHFT
                   &kp LA(LCTRL)  &kp LALT  &kp DEL          &mo 1   &kp SPACE    &kp RETURN  &mo 2   &kp BSPC         &kp RIGHT_ALT  &kp RGUI
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp LA(LS(TAB)) LA(TAB)>;
        };

        lower_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2          &bt BT_SEL 3           &bt BT_SEL 4                     &out OUT_BLE  &out OUT_USB     &rgb_ug RGB_TOG  &soft_off        &win_sleep       &kp PRINTSCREEN
&trans      &trans        &kp RA(NUMBER_1)  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH                    &kp KP_PLUS   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_DIVIDE    &trans
&trans      &trans        &kp RA(SLASH)     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans                           &kp KP_MINUS  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MULTIPLY  &kp KP_DOT
&trans      &trans        &trans            &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans         &trans    &trans  &kp EQUAL     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_0  &trans
                          &trans            &trans                &trans                 &trans         &trans    &trans  &trans        &trans           &trans           &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp LA(LS(TAB)) LA(TAB)>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans  &trans  &trans  &trans   &trans   &trans                     &trans  &trans    &trans    &trans         &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans                     &trans  &kp HOME  &kp UP    &kp PAGE_UP    &trans  &trans
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &trans  &kp LEFT  &kp DOWN  &kp RIGHT      &trans  &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &trans  &kp END   &trans    &kp PAGE_DOWN  &trans  &trans
                &trans  &trans   &trans   &trans   &trans    &trans  &trans  &trans    &trans    &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp LA(LS(TAB)) LA(TAB)>;
        };
    };
};
